{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/RMIT/Courses/Cloud/ASM/Assignment2/COSC2638---CloudCMP---Personalized-New-Feeds/client/src/cognito/Account.js\";\nimport React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"../UserPool\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountContext = /*#__PURE__*/createContext();\n\nconst Account = props => {\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n\n      if (user) {\n        user.getSession(async (err, session) => {\n          if (err) {\n            reject();\n          } else {\n            const attributes = await new Promise((resolve, reject) => {\n              user.getUserAttributes((err, attributes) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  const results = {};\n\n                  for (let attribute of attributes) {\n                    const {\n                      Name,\n                      Value\n                    } = attribute;\n                    results[Name] = Value;\n                  }\n\n                  resolve(results);\n                }\n              });\n            });\n            resolve({\n              user,\n              ...session,\n              ...attributes\n            });\n          }\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const authenticate = async (Username, Password) => {\n    return await new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log(\"onSuccess: \", data);\n          resolve(data);\n        },\n        onFailure: err => {\n          console.error(\"onFailure: \", err);\n          reject(err);\n        },\n        newPasswordRequired: data => {\n          console.log(\"newPasswordRequired: \", data);\n          resolve(data);\n        }\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Account;\nexport { Account, AccountContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/macbook/RMIT/Courses/Cloud/ASM/Assignment2/COSC2638---CloudCMP---Personalized-New-Feeds/client/src/cognito/Account.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","Pool","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","attributes","getUserAttributes","results","attribute","Name","Value","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","logout","signOut","children"],"mappings":"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","sourcesContent":["import React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"../UserPool\";\n\nconst AccountContext = createContext();\n\nconst Account = (props) => {\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n      if (user) {\n        user.getSession(async (err, session) => {\n          if (err) {\n            reject();\n          } else {\n            const attributes = await new Promise((resolve, reject) => {\n              user.getUserAttributes((err, attributes) => {\n                if (err) {\n                  reject(err);\n                } else {\n                  const results = {};\n\n                  for (let attribute of attributes) {\n                    const { Name, Value } = attribute;\n                    results[Name] = Value;\n                  }\n\n                  resolve(results);\n                }\n              });\n            });\n\n            resolve({ user, ...session, ...attributes });\n          }\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const authenticate = async (Username, Password) => {\n    return await new Promise((resolve, reject) => {\n      const user = new CognitoUser({ Username, Pool });\n\n      const authDetails = new AuthenticationDetails({ Username, Password });\n\n      user.authenticateUser(authDetails, {\n        onSuccess: (data) => {\n          console.log(\"onSuccess: \", data);\n          resolve(data);\n        },\n        onFailure: (err) => {\n          console.error(\"onFailure: \", err);\n          reject(err);\n        },\n        newPasswordRequired: (data) => {\n          console.log(\"newPasswordRequired: \", data);\n          resolve(data);\n        },\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n    if (user) {\n      user.signOut();\n    }\n  };\n  return (\n    <AccountContext.Provider value={{ authenticate, getSession, logout }}>\n      {props.children}\n    </AccountContext.Provider>\n  );\n};\nexport { Account, AccountContext };\n"]},"metadata":{},"sourceType":"module"}