{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/RMIT/Courses/Cloud/ASM/Assignment2/COSC2638---CloudCMP---Personalized-New-Feeds/client/src/container/home.js\";\nimport React, { Component } from 'react';\nimport NewsCard from '../components/newscard';\nimport axios from 'axios';\nimport StackGrid from \"react-stack-grid\";\nimport ClassNames from \"../css/home.css\";\nimport ReactLoading from \"react-loading\";\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport NoNetwork from '../assets/images/NoNetwork.png';\nimport ConditionBar from '../components/condtionbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getNews = () => {\n      axios.get(`https://newsapi.org/v2/top-headlines?${this.state.forCountry}${this.state.toquery}${this.state.forCategory}&pageSize=40&apiKey=${this.state.API_KEY}`).then(response => {\n        const articles = response.data.articles; //console.log(articles);\n\n        this.setState({\n          articles: articles,\n          loadingcheck: true\n        }, () => {\n          reactLocalStorage.remove('backupdata');\n          reactLocalStorage.remove('forCountry');\n          reactLocalStorage.remove('forCategory');\n          reactLocalStorage.remove('toquery');\n          reactLocalStorage.remove('CountryValue');\n          reactLocalStorage.remove('CategoryValue');\n          reactLocalStorage.remove('query');\n          reactLocalStorage.setObject('backupdata', articles);\n          reactLocalStorage.setObject('forCountry', this.state.forCountry);\n          reactLocalStorage.setObject('forCategory', this.state.forCategory);\n          reactLocalStorage.setObject('toquery', this.state.toquery);\n          reactLocalStorage.setObject('CountryValue', this.state.CountryValue);\n          reactLocalStorage.setObject('CategoryValue', this.state.CategoryValue);\n          reactLocalStorage.setObject('query', this.state.query);\n        });\n      }).catch(error => {\n        //console.log(error);\n        this.setState({\n          error: error,\n          loadingcheck: true,\n          articles: reactLocalStorage.getObject('backupdata'),\n          forCountry: reactLocalStorage.getObject('forCountry'),\n          forCategory: reactLocalStorage.getObject('forCategory'),\n          toquery: reactLocalStorage.getObject('toquery'),\n          CategoryValue: reactLocalStorage.getObject('CategoryValue'),\n          CountryValue: reactLocalStorage.getObject('CountryValue'),\n          query: reactLocalStorage.getObject('query')\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      if (this.state.error) {\n        alert('Connect to the Network');\n      } else {\n        this.setState({\n          loadingcheck: false\n        });\n        this.setState({\n          query: event.target.value\n        }, () => {\n          //console.log(this.state.query);\n          this.setState({\n            toquery: `&q=${this.state.query}`\n          }, () => {\n            //console.log(this.state.toquery);\n            this.getNews();\n          });\n        });\n\n        if (this.state.query === '') {\n          this.setState({\n            toquery: ''\n          }, () => {\n            //console.log(this.state.url);\n            this.getNews();\n          });\n        }\n      }\n    };\n\n    this.handleCategoryDropdownChange = event => {\n      if (this.state.error) {\n        alert('Connect to the Network');\n      } else {\n        this.setState({\n          loadingcheck: false\n        }); //console.log(event.target.value);\n\n        this.setState({\n          CategoryValue: event.target.value\n        }, () => {\n          //console.log(this.state.CategoryValue);\n          this.setState({\n            forCategory: `&category=${this.state.CategoryValue}`\n          }, () => {\n            //console.log(this.state.forCategory);\n            this.getNews();\n          });\n        });\n      }\n    };\n\n    this.handleCountryDropdownChange = event => {\n      if (this.state.error) {\n        alert('Connect to the Network');\n      } else {\n        this.setState({\n          loadingcheck: false\n        }); //console.log(event.target.value);\n\n        this.setState({\n          CountryValue: event.target.value\n        }, () => {\n          //console.log(this.state.CountryValue);\n          this.setState({\n            forCountry: `country=${this.state.CountryValue}`\n          }, () => {\n            //console.log(this.state.forCountry);\n            this.getNews();\n          });\n        });\n      }\n    };\n\n    this.state = {\n      articles: [],\n      error: false,\n      toquery: '',\n      forCategory: '',\n      forCountry: 'country=us',\n      query: '',\n      CategoryValue: 'general',\n      CountryValue: '',\n      loadingcheck: true,\n      API_KEY: \"e9671d328640462a87a3de5fa12107d9\"\n    };\n  }\n\n  componentDidMount() {\n    this.getNews();\n  }\n\n  render() {\n    const articleState = this.state.articles;\n    let result = this.state.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: ClassNames.loadingpage,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        className: ClassNames.NoNetworkimage,\n        src: NoNetwork,\n        alt: \"Summerize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 86\n      }, this), \" News can 't be loaded\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 41\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: ClassNames.loadingpage,\n      children: [\"Loading...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 109\n      }, this), /*#__PURE__*/_jsxDEV(ReactLoading, {\n        type: \"bubbles\",\n        color: \"#777\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 59\n    }, this);\n\n    if (articleState && articleState.length > 1 && this.state.loadingcheck) {\n      result = /*#__PURE__*/_jsxDEV(StackGrid, {\n        columnWidth: 100,\n        monitorImagesLoaded: true,\n        children: [\" \", this.state.articles.map((arg, i) => {\n          return /*#__PURE__*/_jsxDEV(NewsCard, {\n            articles: arg\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 32\n          }, this);\n        }), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }, this);\n    } else if (articleState.length === 0 && this.state.query !== '') {\n      result = /*#__PURE__*/_jsxDEV(\"p\", {\n        className: ClassNames.loadingpage,\n        children: \" No Search Result Found \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(ConditionBar, {\n        selectedValueCountry: this.state.CountryValue,\n        handleChangeCountry: this.handleCountryDropdownChange,\n        selectedValueCategory: this.state.CategoryValue,\n        handleCategoryChange: this.handleCategoryDropdownChange,\n        value: this.state.query,\n        handleChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), \" \", result, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 18\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/macbook/RMIT/Courses/Cloud/ASM/Assignment2/COSC2638---CloudCMP---Personalized-New-Feeds/client/src/container/home.js"],"names":["React","Component","NewsCard","axios","StackGrid","ClassNames","ReactLoading","reactLocalStorage","NoNetwork","ConditionBar","Home","constructor","props","getNews","get","state","forCountry","toquery","forCategory","API_KEY","then","response","articles","data","setState","loadingcheck","remove","setObject","CountryValue","CategoryValue","query","catch","error","getObject","handleChange","event","alert","target","value","handleCategoryDropdownChange","handleCountryDropdownChange","componentDidMount","render","articleState","result","loadingpage","NoNetworkimage","length","map","arg","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NewsCard from '../components/newscard';\nimport axios from 'axios';\nimport StackGrid from \"react-stack-grid\";\nimport ClassNames from \"../css/home.css\";\nimport ReactLoading from \"react-loading\";\n\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport NoNetwork from '../assets/images/NoNetwork.png';\nimport ConditionBar from '../components/condtionbar';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            articles: [],\n            error: false,\n            toquery: '',\n            forCategory: '',\n            forCountry: 'country=us',\n            query: '',\n            CategoryValue: 'general',\n            CountryValue: '',\n            loadingcheck: true,\n            API_KEY: \"e9671d328640462a87a3de5fa12107d9\"\n        };\n    }\n    getNews = () => {\n        axios\n            .get(`https://newsapi.org/v2/top-headlines?${this.state.forCountry}${this.state.toquery}${this.state.forCategory}&pageSize=40&apiKey=${this.state.API_KEY}`)\n            .then(response => {\n                const articles = response.data.articles;\n                //console.log(articles);\n                this.setState({ articles: articles, loadingcheck: true }, () => {\n                    reactLocalStorage.remove('backupdata');\n                    reactLocalStorage.remove('forCountry');\n                    reactLocalStorage.remove('forCategory');\n                    reactLocalStorage.remove('toquery');\n                    reactLocalStorage.remove('CountryValue');\n                    reactLocalStorage.remove('CategoryValue');\n                    reactLocalStorage.remove('query');\n                    reactLocalStorage.setObject('backupdata', articles);\n                    reactLocalStorage.setObject('forCountry', this.state.forCountry);\n                    reactLocalStorage.setObject('forCategory', this.state.forCategory);\n                    reactLocalStorage.setObject('toquery', this.state.toquery);\n                    reactLocalStorage.setObject('CountryValue', this.state.CountryValue);\n                    reactLocalStorage.setObject('CategoryValue', this.state.CategoryValue);\n                    reactLocalStorage.setObject('query', this.state.query);\n                });\n            })\n            .catch(error => {\n                //console.log(error);\n                this.setState({\n                    error: error,\n                    loadingcheck: true,\n                    articles: reactLocalStorage.getObject('backupdata'),\n                    forCountry: reactLocalStorage.getObject('forCountry'),\n                    forCategory: reactLocalStorage.getObject('forCategory'),\n                    toquery: reactLocalStorage.getObject('toquery'),\n                    CategoryValue: reactLocalStorage.getObject('CategoryValue'),\n                    CountryValue: reactLocalStorage.getObject('CountryValue'),\n                    query: reactLocalStorage.getObject('query')\n                });\n            });\n    }\n    componentDidMount() {\n        this.getNews();\n    }\n    handleChange = (event) => {\n        if (this.state.error) {\n            alert('Connect to the Network')\n        } else {\n            this.setState({ loadingcheck: false });\n            this.setState({ query: event.target.value }, () => {\n                //console.log(this.state.query);\n                this.setState({ toquery: `&q=${this.state.query}` }, () => {\n                    //console.log(this.state.toquery);\n                    this.getNews();\n                });\n            });\n\n            if (this.state.query === '') {\n                this.setState({ toquery: '' }, () => {\n                    //console.log(this.state.url);\n                    this.getNews();\n                });\n            }\n        }\n    }\n\n    handleCategoryDropdownChange = (event) => {\n        if (this.state.error) {\n            alert('Connect to the Network')\n        } else {\n            this.setState({ loadingcheck: false });\n            //console.log(event.target.value);\n            this.setState({ CategoryValue: event.target.value }, () => {\n                //console.log(this.state.CategoryValue);\n                this.setState({ forCategory: `&category=${this.state.CategoryValue}` }, () => {\n                    //console.log(this.state.forCategory);\n                    this.getNews();\n                });\n            });\n        }\n    }\n\n    handleCountryDropdownChange = (event) => {\n        if (this.state.error) {\n            alert('Connect to the Network')\n        } else {\n            this.setState({ loadingcheck: false });\n            //console.log(event.target.value);\n            this.setState({ CountryValue: event.target.value }, () => {\n                //console.log(this.state.CountryValue);\n                this.setState({ forCountry: `country=${this.state.CountryValue}` }, () => {\n                    //console.log(this.state.forCountry);\n                    this.getNews();\n                });\n            });\n        }\n    }\n\n\n    render() {\n        const articleState = this.state.articles;\n        let result = this.state.error ? < p className = { ClassNames.loadingpage } > < img className = { ClassNames.NoNetworkimage }\n        src = { NoNetwork }\n        alt = 'Summerize' / > News can 't be loaded</p> : <div className={ClassNames.loadingpage}>Loading...<br /><ReactLoading type=\"bubbles\" color=\"#777\" /></div>;\n        if (articleState && articleState.length > 1 && this.state.loadingcheck) {\n\n            result = < StackGrid\n            columnWidth = { 100 }\n            monitorImagesLoaded = { true } > {\n                    this.state.articles.map((arg, i) => {\n                        return <NewsCard key = { i }\n                        articles = { arg }\n                        />;\n                    })\n                } <\n                /StackGrid>\n        } else if (articleState.length === 0 && this.state.query !== '') {\n            result = < p className = { ClassNames.loadingpage } > No Search Result Found < /p>\n        }\n        return ( <\n            div className = \"body\" >\n            <\n            ConditionBar selectedValueCountry = { this.state.CountryValue }\n            handleChangeCountry = { this.handleCountryDropdownChange }\n            selectedValueCategory = { this.state.CategoryValue }\n            handleCategoryChange = { this.handleCategoryDropdownChange }\n            value = { this.state.query }\n            handleChange = { this.handleChange }\n            /> { result } <\n            /div>\n        );\n    }\n}\n\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}